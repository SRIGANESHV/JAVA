import java.awt.Frame;
import java.time.LocalDate;

public class BankTest {
	public static void main(String[] args) {
		BankAccount ba = new BankAccount(101, "Jack",50000);
		
		System.out.println("-------------");

		SavingsAccount savAccObj2 = new SavingsAccount(102,"Jane",90000,3.5);
		
		System.out.println("-------------");

		//FixedDepositAccount fdAccObj3 = new FixedDepositAccount(101,"Julie",90000,7.5,5);
		
	/*	ba.printBankAccount();
		System.out.println("-------------");
		savAccObj2.printBankAccount();
		double si = savAccObj2.calculateSimpleInterest();
		System.out.println("simple interest : "+si);
		
		System.out.println("-------------");
		fdAccObj3.printBankAccount();
		double ma = fdAccObj3.calculateMaturityAmount();
		System.out.println("maturity amount : "+ma);*/
		
		Teller t1 = new Teller("Seeta",ba,5000); //3
		Teller t2 = new Teller("\tGeeta",ba,7000); //3
		Teller t3 = new Teller("\t\tReeta",ba,8000); //3
		
		t1.start();
		t2.start();
		t3.start();
		
		try {
			t1.join(); 
			t2.join(); 
			t3.join(); 
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println("last line : ba"+ba);
	}
}

//making the data member as private
// and allowing this data via accessible functions


class Teller extends Thread //1
{
	String tellerName;
	BankAccount ref;
	double amountToWithdraw;
	
	Teller(String name, BankAccount x, double amt) {
		tellerName= name;
		ref= x;
		amountToWithdraw=amt;
	}
	void withdrawCash() {
		System.out.println(tellerName+" withdrawing cash "+amountToWithdraw);
		ref.withdraw(amountToWithdraw, tellerName);
	}
	public void run() { //2
		withdrawCash();
	}
}

class BankAccount {
	private int accountNumber;
	private String accountHolderName;
	protected double accountBalance;
	
	public BankAccount(int accountNumber, String accountHolderName, double accountBalance) {
		super();
		this.accountNumber = accountNumber;
		this.accountHolderName = accountHolderName;
		this.accountBalance = accountBalance;
	}
	
	@Override
	public String toString() {
		return "BankAccount [accountNumber=" + accountNumber + ", accountHolderName=" + accountHolderName
				+ ", accountBalance=" + accountBalance + "]";
	}

	public String getAccountHolderName() {
		return accountHolderName;
	}
	public void setAccountHolderName(String accountHolderName) {
		this.accountHolderName = accountHolderName;
	}
	public double getAccountBalance(String tn) {
		System.out.println(tn+" getting the balance....");
		return accountBalance;
	}
	public void setAccountBalance(double accountBalance,String tn) {
		System.out.println(tn+" setting the balance....");
		this.accountBalance = accountBalance;
	}

	public int getAccountNumber() {
		return accountNumber;
	}
	
	//allows only one thread to enter inside this method and other nested calls
	public synchronized  void withdraw(double amountToDeposit, String tn) {
		System.out.println(tn+" Deposit(double) started.....");
		double currentBalance = getAccountBalance(tn);
		System.out.println(tn+" Balance got : "+currentBalance);
		System.out.println(tn+" calculating new balance .....");
		double newBalance = currentBalance + amountToDeposit;
		setAccountBalance(newBalance,tn);
		System.out.println(tn+" Deposit(double) finished.....");
		System.out.println("---------------------");
	}
	
	/*BankAccount(int x, String y, double z)
	{
		System.out.println("BankAccount(int,String,double)...constructor invoked....");
		
		if(x<0) {
			throw new RuntimeException("Account number cannot be in negative...terminating..");
		}
		else
			accountNumber=x;
		
		if(y==null) {
			throw new RuntimeException("Account holder name cannot be null...terminating..");
		}
		else
			accountHolderName=y;
		
		if(z<0) {
			//RuntimeException r = new RuntimeException("some problem.....");
			//throw r;
			throw new RuntimeException("Account Balance cannot be in negative...terminating..");
		}
		else
			accountBalance=z;
	}*/
	
	//accessor 
	void printBankAccount() 
	{
		System.out.println("Account Number  : "+accountNumber);
		System.out.println("Account HName   : "+accountHolderName);
		System.out.println("Account Balance : "+accountBalance);
		System.out.println("-----------------------");
	}
	/*double withdraw(double amountToWithdraw,String name) {
		if(amountToWithdraw > accountBalance) {
			throw new RuntimeException("Insufficient funds....");
		}
		System.out.println("Withdraw in progresss..."+amountToWithdraw);
		accountBalance = accountBalance - amountToWithdraw;
		System.out.println("Withdraw is done...");
		return accountBalance;
	}*/
	
	double deposit(double amountToDeposit, String name) {
		if(amountToDeposit > 50000) {
			throw new RuntimeException("Please provide the PAN OR Form60");
		}
		System.out.println("Deposit in progresss..."+amountToDeposit);
		accountBalance = accountBalance + amountToDeposit;
		System.out.println("Deposit is done...");
		return accountBalance;
	}
	
	double getBalance() { //accessor
		return accountBalance;
	}
}

class SavingsAccount extends BankAccount
{
	//DATA MEMBER
	protected double rateOfInterest;
	
	SavingsAccount(int x, String y, double z, double r)
	{
		super(x,y,z); //invoke the ctor of the super class
		System.out.println("SavingsAccount(int,String,double,double)...constructor invoked....");
		
		if(r<0) {
			throw new RuntimeException("Account rate cannot be in negative...terminating..");
		}
		else 
			rateOfInterest=r;
	}
	
	//accessor 
	void printBankAccount() 
	{
		super.printBankAccount();
		System.out.println("Account ROI     : "+rateOfInterest);
		System.out.println("-----------------------");
	}
	
	double calculateSimpleInterest() {
		return (super.accountBalance*1*rateOfInterest)/100;
	}
}

class FixedDepositAccount extends SavingsAccount
{
	//DATA MEMBER
	private int tenure;
	
	FixedDepositAccount(int x, String y, double z, double r, int t)
	{
		super(x,y,z,r); //invoke the ctor of the super class
		System.out.println("FixedDepositAccount(int,String,double,double,int)...constructor invoked....");
		
		if(t<0) {
			throw new RuntimeException("Fixed Deposit Account tenure cannot be in negative...terminating..");
		}
		else 
			tenure=t;
	}
	
	//accessor 
	void printBankAccount() 
	{
		super.printBankAccount();
		System.out.println("Fixed Tenure    : "+tenure);
		System.out.println("-----------------------");
	}
	
	double calculateMaturityAmount() {
		double x = Math.pow( (1+rateOfInterest/100), tenure);
		double y = accountBalance * x;
		return y;
	}
}
